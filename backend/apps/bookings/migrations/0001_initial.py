# Generated by Django 4.2.10 on 2025-09-01 12:45

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('services', '0003_servicereview_alter_serviceimage_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateField()),
                ('booking_time', models.TimeField()),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15)),
                ('note', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking_step', models.CharField(choices=[('service_selection', 'Service Selection'), ('datetime_selection', 'Date & Time Selection'), ('details_input', 'Details Input'), ('payment', 'Payment'), ('confirmation', 'Confirmation'), ('completed', 'Completed')], default='completed', help_text='Current step in the booking process', max_length=20)),
                ('special_instructions', models.TextField(blank=True, help_text='Additional instructions from customer', null=True)),
                ('estimated_duration', models.DurationField(blank=True, default=datetime.timedelta(seconds=3600), help_text='Estimated service duration', null=True)),
                ('preferred_provider_gender', models.CharField(choices=[('any', 'Any'), ('male', 'Male'), ('female', 'Female')], default='any', help_text="Customer's preference for provider gender", max_length=10)),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this is a recurring booking')),
                ('recurring_frequency', models.CharField(blank=True, choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly')], help_text='Frequency for recurring bookings', max_length=20, null=True)),
                ('is_express_booking', models.BooleanField(default=False, help_text='Whether this is an express/rush booking with premium pricing')),
                ('express_fee', models.DecimalField(decimal_places=2, default=0, help_text='Additional fee for express service', max_digits=10)),
            ],
            options={
                'ordering': ['-booking_date', '-booking_time'],
            },
        ),
        migrations.CreateModel(
            name='BookingAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('confirmed_bookings', models.PositiveIntegerField(default=0)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('cancelled_bookings', models.PositiveIntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('average_booking_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('active_providers', models.PositiveIntegerField(default=0)),
                ('new_providers', models.PositiveIntegerField(default=0)),
                ('new_customers', models.PositiveIntegerField(default=0)),
                ('returning_customers', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Booking Analytics',
                'verbose_name_plural': 'Booking Analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('payment_type', models.CharField(choices=[('digital_wallet', 'Digital Wallet'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash on Service')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('processing_fee_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('icon', models.CharField(blank=True, max_length=100, null=True)),
                ('gateway_config', models.JSONField(blank=True, default=dict)),
                ('is_featured', models.BooleanField(default=False, help_text='Featured payment method')),
                ('priority_order', models.PositiveIntegerField(default=0, help_text='Display order priority')),
                ('description', models.TextField(blank=True, help_text='Payment method description', null=True)),
                ('supported_currencies', models.JSONField(blank=True, default=list, help_text='Supported currencies')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum transaction amount', max_digits=10, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum transaction amount', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['payment_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('khalti_token', models.CharField(blank=True, max_length=200, null=True)),
                ('khalti_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('khalti_response', models.JSONField(blank=True, default=dict)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('gateway_response', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('payment_attempts', models.PositiveIntegerField(default=1, help_text='Number of payment attempts')),
                ('last_payment_attempt', models.DateTimeField(auto_now=True, help_text='Last payment attempt timestamp')),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure', null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0, help_text='Amount refunded', max_digits=10)),
                ('refund_reason', models.TextField(blank=True, help_text='Reason for refund', null=True)),
                ('refunded_at', models.DateTimeField(blank=True, help_text='Refund timestamp', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='bookings.booking')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookings.paymentmethod')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Overall service rating')),
                ('punctuality_rating', models.IntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Provider punctuality')),
                ('quality_rating', models.IntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Service quality')),
                ('communication_rating', models.IntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Communication quality')),
                ('value_rating', models.IntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Good'), (4, '4 - Very Good'), (5, '5 - Excellent')], help_text='Value for money')),
                ('comment', models.TextField(help_text='Detailed feedback comment')),
                ('would_recommend', models.BooleanField(default=True, help_text='Would recommend to others')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Anonymous feedback')),
                ('is_verified_booking', models.BooleanField(default=True, help_text='Feedback from verified booking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_feedback', to='bookings.booking')),
            ],
            options={
                'verbose_name': 'Customer Feedback',
                'verbose_name_plural': 'Customer Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookingSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('max_bookings', models.PositiveIntegerField(default=1)),
                ('current_bookings', models.PositiveIntegerField(default=0)),
                ('slot_type', models.CharField(choices=[('normal', 'Normal'), ('express', 'Express'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', max_length=20)),
                ('base_price_override', models.DecimalField(blank=True, decimal_places=2, help_text='Override service price for this specific slot', max_digits=10, null=True)),
                ('is_rush', models.BooleanField(default=False, help_text='Express slot with premium pricing')),
                ('rush_fee_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional fee percentage (e.g., 50.00 for 50%)', max_digits=5)),
                ('provider_note', models.TextField(blank=True, help_text='Special instructions from provider', null=True)),
                ('created_from_availability', models.BooleanField(default=True, help_text='Generated from provider availability vs manually created')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(blank=True, default=1, limit_choices_to={'role': 'provider'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_slots', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_slots', to='services.service')),
            ],
            options={
                'verbose_name': 'Booking Slot',
                'verbose_name_plural': 'Booking Slots',
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='booking_slot',
            field=models.ForeignKey(blank=True, help_text='Associated booking slot for time management', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='bookings.bookingslot'),
        ),
        migrations.AddField(
            model_name='booking',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='services.service'),
        ),
        migrations.CreateModel(
            name='ServiceTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of week (0=Monday, 6=Sunday)')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration_hours', models.DecimalField(decimal_places=2, default=1.0, help_text='How long this service typically takes', max_digits=4)),
                ('is_peak_time', models.BooleanField(default=False, help_text='Peak hours with higher pricing')),
                ('peak_price_multiplier', models.DecimalField(decimal_places=2, default=1.0, help_text='Price multiplier for peak times (e.g., 1.5 for 50% increase)', max_digits=4)),
                ('is_active', models.BooleanField(default=True)),
                ('max_bookings_per_slot', models.PositiveIntegerField(default=1, help_text='How many customers can book this time slot')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='services.service')),
            ],
            options={
                'verbose_name': 'Service Time Slot',
                'verbose_name_plural': 'Service Time Slots',
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('service', 'day_of_week', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='ProviderAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('break_start', models.TimeField(blank=True, help_text='Lunch/break start time', null=True)),
                ('break_end', models.TimeField(blank=True, help_text='Lunch/break end time', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(limit_choices_to={'role': 'provider'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_schedule', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Provider Availability',
                'verbose_name_plural': 'Provider Availabilities',
                'ordering': ['weekday', 'start_time'],
                'unique_together': {('provider', 'weekday', 'start_time')},
            },
        ),
        migrations.AddIndex(
            model_name='bookingslot',
            index=models.Index(fields=['date', 'is_available'], name='bookings_bo_date_149674_idx'),
        ),
        migrations.AddIndex(
            model_name='bookingslot',
            index=models.Index(fields=['provider', 'date'], name='bookings_bo_provide_9b5864_idx'),
        ),
        migrations.AddIndex(
            model_name='bookingslot',
            index=models.Index(fields=['service', 'date'], name='bookings_bo_service_a4c134_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bookingslot',
            unique_together={('service', 'provider', 'date', 'start_time')},
        ),
    ]
