# Generated by Django 4.2.10 on 2025-09-08 04:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bookings', '0004_remove_note_field'),
    ]

    operations = [
        migrations.AddField(
            model_name='payment',
            name='cash_collected_at',
            field=models.DateTimeField(blank=True, help_text='When cash was collected from customer', null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='cash_collected_by',
            field=models.ForeignKey(blank=True, help_text='Provider who collected cash payment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_cash_payments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='is_cash_payment',
            field=models.BooleanField(default=False, help_text='Whether this is a cash payment (collected after service delivery)'),
        ),
        migrations.AddField(
            model_name='payment',
            name='is_verified',
            field=models.BooleanField(default=False, help_text='Payment has been verified (auto-true for digital payments, manual for cash)'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_type',
            field=models.CharField(choices=[('digital_wallet', 'Digital Wallet'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash on Service')], default='digital_wallet', help_text='Type of payment method used for this transaction', max_length=20),
        ),
        migrations.AddField(
            model_name='payment',
            name='refunded_by',
            field=models.ForeignKey(blank=True, help_text='Admin who processed the refund', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='verified_at',
            field=models.DateTimeField(blank=True, help_text='When payment was verified', null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='verified_by',
            field=models.ForeignKey(blank=True, help_text='Admin who verified the payment (for cash payments)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='booking',
            name='booking_step',
            field=models.CharField(choices=[('service_selection', 'Service Selection'), ('datetime_selection', 'Date & Time Selection'), ('details_input', 'Details Input'), ('payment', 'Payment'), ('confirmation', 'Confirmation'), ('completed', 'Completed'), ('payment_completed', 'Payment Completed'), ('service_delivered', 'Service Delivered'), ('customer_confirmed', 'Customer Confirmed')], default='completed', help_text='Current step in the booking process', max_length=25),
        ),
        migrations.AlterField(
            model_name='booking',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected'), ('payment_pending', 'Payment Pending'), ('service_delivered', 'Service Delivered'), ('awaiting_confirmation', 'Awaiting Confirmation'), ('disputed', 'Disputed')], default='pending', max_length=25),
        ),
        migrations.AlterField(
            model_name='payment',
            name='failure_reason',
            field=models.TextField(blank=True, help_text='Reason for payment failure (if applicable)', null=True),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_attempts',
            field=models.PositiveIntegerField(default=1, help_text='Number of payment attempts made'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='refund_amount',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Amount refunded to customer', max_digits=10),
        ),
        migrations.AlterField(
            model_name='payment',
            name='refunded_at',
            field=models.DateTimeField(blank=True, help_text='When refund was processed', null=True),
        ),
        migrations.CreateModel(
            name='ServiceDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When service was marked as delivered by provider', null=True)),
                ('delivery_notes', models.TextField(blank=True, help_text="Provider's notes about service delivery completion")),
                ('delivery_photos', models.JSONField(blank=True, default=list, help_text='Photos of completed service (stored as list of file paths/URLs)')),
                ('customer_confirmed_at', models.DateTimeField(blank=True, help_text='When customer confirmed service completion', null=True)),
                ('customer_rating', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Customer satisfaction rating (1-5 stars)', null=True)),
                ('customer_notes', models.TextField(blank=True, help_text="Customer's feedback about the service quality")),
                ('would_recommend', models.BooleanField(blank=True, help_text='Would customer recommend this provider to others', null=True)),
                ('dispute_raised', models.BooleanField(default=False, help_text='Customer raised dispute about service delivery quality')),
                ('dispute_reason', models.TextField(blank=True, help_text='Detailed reason for the dispute')),
                ('dispute_resolved', models.BooleanField(default=False, help_text='Dispute has been resolved by admin')),
                ('dispute_resolved_at', models.DateTimeField(blank=True, help_text='When dispute was resolved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(help_text='Associated booking for this service delivery', on_delete=django.db.models.deletion.CASCADE, related_name='service_delivery', to='bookings.booking')),
                ('delivered_by', models.ForeignKey(blank=True, help_text='Provider who marked service as delivered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivered_services', to=settings.AUTH_USER_MODEL)),
                ('dispute_resolved_by', models.ForeignKey(blank=True, help_text='Admin who resolved the dispute', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_disputes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Service Delivery',
                'verbose_name_plural': 'Service Deliveries',
                'ordering': ['-delivered_at'],
                'indexes': [models.Index(fields=['delivered_at'], name='bookings_se_deliver_760f6f_idx'), models.Index(fields=['customer_confirmed_at'], name='bookings_se_custome_ad18b3_idx'), models.Index(fields=['dispute_raised'], name='bookings_se_dispute_c912ca_idx')],
            },
        ),
    ]
