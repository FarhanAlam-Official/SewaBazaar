# Generated by Django 4.2.10 on 2025-09-14 10:05

from django.db import migrations
from django.core.files.storage import default_storage
import os


def organize_existing_service_images(apps, schema_editor):
    """
    Organize existing service images into proper directory structure
    """
    ServiceImage = apps.get_model('services', 'ServiceImage')
    
    # For each service image, we need to move it to the new organized structure
    for image in ServiceImage.objects.all():
        if image.image:
            try:
                # Get the current file path
                old_path = image.image.name
                
                # Generate new path using our custom function
                # We need to simulate the instance for the upload function
                from apps.services.models import service_image_upload_path
                filename = os.path.basename(old_path)
                new_path = service_image_upload_path(image, filename)
                
                # Move the file if paths are different
                if old_path != new_path:
                    # Check if file exists at old path
                    if default_storage.exists(old_path):
                        # Read the file content
                        file_content = default_storage.open(old_path).read()
                        
                        # Save to new location
                        default_storage.save(new_path, file_content)
                        
                        # Update the model field
                        image.image.name = new_path
                        
                        # Delete the old file
                        default_storage.delete(old_path)
                        
                        # Save the model
                        image.save()
            except Exception as e:
                # Log the error but continue with other images
                print(f"Error organizing image {image.id}: {str(e)}")
                continue


def reverse_organize_existing_service_images(apps, schema_editor):
    """
    Reverse the organization of service images (not implemented for simplicity)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0004_service_image_organization'),
    ]

    operations = [
        migrations.RunPython(
            organize_existing_service_images,
            reverse_organize_existing_service_images
        ),
    ]