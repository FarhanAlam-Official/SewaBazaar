# Generated by Django 4.2.10 on 2025-09-23 16:30

import apps.accounts.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0006_remove_deprecated_image_field'),
        ('accounts', '0009_portfolio_restructure'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProviderDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('business_license', 'Business License'), ('insurance_certificate', 'Insurance Certificate'), ('professional_certification', 'Professional Certification'), ('identity_document', 'Identity Document'), ('tax_certificate', 'Tax Certificate'), ('bank_statement', 'Bank Statement'), ('portfolio_certificate', 'Portfolio Certificate'), ('other', 'Other Document')], help_text='Type of document being uploaded', max_length=30)),
                ('title', models.CharField(help_text='Document title or name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('file', models.FileField(help_text='The document file', upload_to=apps.accounts.models.document_upload_path)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('file_type', models.CharField(blank=True, help_text='MIME type of the file', max_length=50, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('resubmission_required', 'Resubmission Required')], default='pending', help_text='Current verification status', max_length=25)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level for review', max_length=10)),
                ('is_required', models.BooleanField(default=False, help_text='Whether this document is required for verification')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this document in the profile')),
                ('expiry_date', models.DateField(blank=True, help_text='Document expiry date (if applicable)', null=True)),
                ('issue_date', models.DateField(blank=True, help_text='Document issue date (if applicable)', null=True)),
                ('issuing_authority', models.CharField(blank=True, help_text='Authority that issued the document', max_length=200, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the document was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Internal review notes from admin', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection (if applicable)', null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order for documents')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorizing documents')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for the document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(help_text='The provider who uploaded this document', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounts.profile')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Admin user who reviewed this document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Provider Document',
                'verbose_name_plural': 'Provider Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentVerificationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('resubmission_required', 'Resubmission Required')], help_text='Previous status before change', max_length=25)),
                ('new_status', models.CharField(choices=[('pending', 'Pending Review'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('resubmission_required', 'Resubmission Required')], help_text='New status after change', max_length=25)),
                ('change_reason', models.TextField(blank=True, help_text='Reason for the status change', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the change', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_by', models.ForeignKey(blank=True, help_text='User who made the status change', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(help_text='The document this history entry relates to', on_delete=django.db.models.deletion.CASCADE, related_name='verification_history', to='accounts.providerdocument')),
            ],
            options={
                'verbose_name': 'Document Verification History',
                'verbose_name_plural': 'Document Verification Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the document requirement', max_length=200)),
                ('document_type', models.CharField(choices=[('business_license', 'Business License'), ('insurance_certificate', 'Insurance Certificate'), ('professional_certification', 'Professional Certification'), ('identity_document', 'Identity Document'), ('tax_certificate', 'Tax Certificate'), ('bank_statement', 'Bank Statement'), ('portfolio_certificate', 'Portfolio Certificate'), ('other', 'Other Document')], help_text='Type of document required', max_length=30)),
                ('description', models.TextField(help_text='Description of what this document should contain')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for verification')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level for this requirement', max_length=10)),
                ('max_file_size', models.PositiveIntegerField(default=5242880, help_text='Maximum file size in bytes')),
                ('allowed_file_types', models.JSONField(default=list, help_text='List of allowed file extensions')),
                ('validity_period_days', models.PositiveIntegerField(blank=True, help_text='How many days the document is valid for', null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order for requirements')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this requirement is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_categories', models.ManyToManyField(blank=True, help_text='Service categories this requirement applies to', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Document Requirement',
                'verbose_name_plural': 'Document Requirements',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='providerdocument',
            index=models.Index(fields=['provider', 'document_type'], name='accounts_pr_provide_52d253_idx'),
        ),
        migrations.AddIndex(
            model_name='providerdocument',
            index=models.Index(fields=['status'], name='accounts_pr_status_ca9132_idx'),
        ),
        migrations.AddIndex(
            model_name='providerdocument',
            index=models.Index(fields=['expiry_date'], name='accounts_pr_expiry__7a4f49_idx'),
        ),
    ]
