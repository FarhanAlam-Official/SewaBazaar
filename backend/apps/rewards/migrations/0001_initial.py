# Generated by Django 4.2.10 on 2025-09-11 13:42

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bookings', '0006_remove_paymentmethod_icon_paymentmethod_icon_emoji_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='RewardVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reward Voucher',
                'verbose_name_plural': 'Reward Vouchers',
            },
        ),
        migrations.CreateModel(
            name='RewardsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_per_rupee', models.DecimalField(decimal_places=3, default=0.1, help_text='Points earned per rupee spent on bookings (e.g., 0.1 = 1 point per 10 rupees)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('points_per_review', models.PositiveIntegerField(default=50, help_text='Points awarded for writing a service review')),
                ('points_per_referral', models.PositiveIntegerField(default=500, help_text='Points awarded when a referred user makes their first booking')),
                ('first_booking_bonus', models.PositiveIntegerField(default=200, help_text="Bonus points for user's first booking")),
                ('weekend_booking_bonus', models.PositiveIntegerField(default=50, help_text='Extra points for bookings made on weekends')),
                ('rupees_per_point', models.DecimalField(decimal_places=3, default=0.1, help_text='Rupee value per point when redeeming (e.g., 0.1 = 10 points per rupee)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('min_redemption_points', models.PositiveIntegerField(default=100, help_text='Minimum points required for any redemption')),
                ('voucher_denominations', models.JSONField(default=list, help_text='Available voucher amounts in rupees [100, 200, 500, 1000, 5000, 10000]')),
                ('tier_thresholds', models.JSONField(default=dict, help_text='Points required for each tier {"silver": 1000, "gold": 5000, "platinum": 15000}')),
                ('tier_multipliers', models.JSONField(default=dict, help_text='Point earning multipliers for each tier {"bronze": 1.0, "silver": 1.2, "gold": 1.5, "platinum": 2.0}')),
                ('points_expiry_months', models.PositiveIntegerField(default=12, help_text='Number of months after which unused points expire', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('voucher_validity_days', models.PositiveIntegerField(default=365, help_text='Number of days a voucher remains valid after generation', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(1095)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether the rewards system is currently active')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Put rewards system in maintenance mode (no new transactions)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, help_text='Admin who last updated this configuration', limit_choices_to={'role': 'admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rewards Configuration',
                'verbose_name_plural': 'Rewards Configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RewardAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_balance', models.PositiveIntegerField(default=0, help_text='Current available points balance')),
                ('total_points_earned', models.PositiveIntegerField(default=0, help_text='Total points earned throughout account lifetime')),
                ('total_points_redeemed', models.PositiveIntegerField(default=0, help_text='Total points redeemed throughout account lifetime')),
                ('tier_level', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', help_text='Current customer tier based on total points earned', max_length=20)),
                ('tier_updated_at', models.DateTimeField(blank=True, help_text='When the tier was last updated', null=True)),
                ('lifetime_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount spent by user across all bookings', max_digits=12)),
                ('last_points_earned', models.DateTimeField(blank=True, help_text='When user last earned points', null=True)),
                ('last_points_redeemed', models.DateTimeField(blank=True, help_text='When user last redeemed points', null=True)),
                ('total_referrals', models.PositiveIntegerField(default=0, help_text='Number of successful referrals made by this user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='User who owns this reward account', on_delete=django.db.models.deletion.CASCADE, related_name='reward_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reward Account',
                'verbose_name_plural': 'Reward Accounts',
                'ordering': ['-total_points_earned'],
                'indexes': [models.Index(fields=['tier_level'], name='rewards_rew_tier_le_7668e3_idx'), models.Index(fields=['current_balance'], name='rewards_rew_current_9d6ed4_idx'), models.Index(fields=['total_points_earned'], name='rewards_rew_total_p_fa1e13_idx')],
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned_booking', 'Earned from Booking'), ('earned_review', 'Earned from Review'), ('earned_referral', 'Earned from Referral'), ('earned_first_booking', 'First Booking Bonus'), ('earned_weekend_booking', 'Weekend Booking Bonus'), ('earned_tier_bonus', 'Tier Upgrade Bonus'), ('earned_special', 'Special Promotion'), ('earned_admin_bonus', 'Admin Bonus'), ('redeemed_voucher', 'Redeemed for Voucher'), ('redeemed_discount', 'Applied as Discount'), ('expired', 'Points Expired'), ('adjustment_positive', 'Admin Adjustment (Credit)'), ('adjustment_negative', 'Admin Adjustment (Debit)'), ('refund', 'Booking Cancellation Refund')], help_text='Type of points transaction', max_length=30)),
                ('points', models.IntegerField(help_text='Points amount (positive for earning, negative for redemption)')),
                ('balance_after', models.PositiveIntegerField(help_text="User's points balance after this transaction")),
                ('description', models.CharField(help_text='Human-readable description of the transaction', max_length=255)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional transaction data (tier info, multipliers, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this transaction', unique=True)),
                ('booking', models.ForeignKey(blank=True, help_text='Related booking if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points_transactions', to='bookings.booking')),
                ('processed_by', models.ForeignKey(blank=True, help_text='Admin who processed this transaction (for manual adjustments)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_transactions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who performed this transaction', on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(blank=True, help_text='Related voucher if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='points_transactions', to='rewards.rewardvoucher')),
            ],
            options={
                'verbose_name': 'Points Transaction',
                'verbose_name_plural': 'Points Transactions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='rewards_poi_user_id_78c28b_idx'), models.Index(fields=['transaction_type'], name='rewards_poi_transac_f49e63_idx'), models.Index(fields=['booking'], name='rewards_poi_booking_6703dc_idx'), models.Index(fields=['voucher'], name='rewards_poi_voucher_72ef9c_idx'), models.Index(fields=['transaction_id'], name='rewards_poi_transac_a7409d_idx')],
            },
        ),
    ]
